plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group
def buildnumber = 1

repositories {
    maven { url "https://maven.terraformersmc.com/" }
    maven {
        url 'https://masa.dy.fi/maven'
    }
}

loom {
    accessWidenerPath = file("src/main/resources/serverReplayMod.accesswidener")
}

configurations {
    provided
    // Make compile extend from our provided configuration so that things added to bundled end up on the compile classpath
    implementation.extendsFrom(provided)
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modCompileOnly "carpet:fabric-carpet:${project.minecraft_version}-${project.carpet_core_version}"
    provided "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:latest.release"
}

def placeholders = [
        'version': project.version,
        'mc_version': project.minecraft_version,
        'build': buildnumber
]

processResources {
    inputs.properties placeholders
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand placeholders
    }
    filesMatching("placeholders.properties") {
        expand placeholders
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
    from configurations.provided.asFileTree.files.collect { zipTree(it) }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

tasks.register("updateBuildNumber"){
    doLast {
        Properties props = new Properties()

        File propsFile = new File("build-${project.minecraft_version}.properties")

        try {
            props.load(propsFile.newDataInputStream())

            String prevVersion = (props.getProperty('mod_version'))

            if (prevVersion.equals(project.mod_version)) {

                buildnumber = (((props.getProperty('mod_buildnumber')) as Integer) + 1)
                placeholders.build = buildnumber

            }
        }catch (IOException ignored){
        }

        props.setProperty('mod_buildnumber', buildnumber.toString())
        props.setProperty('mod_version', project.mod_version.toString())

        props.store(propsFile.newWriter(), null)

        props.load(propsFile.newDataInputStream())

    }
    outputs.upToDateWhen { false }
}

tasks.register("FinalizeBuild", Copy) {
    from "$buildDir/libs"
    into "output/libs"
    include "${project.archives_base_name}-${project.version}.jar"
    rename { String filename ->
        return "${project.archives_base_name}-${project.version} build ${buildnumber}.jar"
    }
    doLast {
        mkdir "output/libs"
        println "Output File:"
        println "${project.archives_base_name}-${project.version} build ${buildnumber}.jar"
    }
    outputs.upToDateWhen { false }
}

tasks.compileJava.finalizedBy updateBuildNumber
tasks.updateBuildNumber.shouldRunAfter compileJava
tasks.build.finalizedBy FinalizeBuild